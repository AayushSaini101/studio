generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model apis {
  asyncapi          String
  computedAsyncapi  Json      @map(name: "computed_asyncapi")
  createdAt         DateTime? @default(now()) @map(name: "created_at")
  creatorId         Int       @map(name: "creator_id")
  id                Int       @default(autoincrement()) @id
  projectId         Int       @map(name: "project_id")
  title             String
  version           String
  creator           users     @relation(fields: [creatorId], references: [id])
  project           projects  @relation(fields: [projectId], references: [id])
}

model invitations {
  createdAt       DateTime?     @default(now()) @map(name: "created_at")
  expiresAt       DateTime      @map(name: "expires_at")
  id              Int           @default(autoincrement()) @id
  inviterId       Int           @map(name: "inviter_id")
  organizationId  Int           @map(name: "organization_id")
  role            String
  scope           String?       @default("one")
  uuid            String        @unique
  inviter         users         @relation(fields: [inviterId], references: [id])
  organization    organizations @relation(fields: [organizationId], references: [id])
}

model organizations {
  createdAt                   DateTime?             @default(now()) @map(name: "created_at")
  featureFlags                Json?                 @map(name: "feature_flags")
  id                          Int                   @default(autoincrement()) @id
  name                        String
  creatorId                   Int                   @map(name: "creator_id")
  planName                    String?               @default("free") @map(name: "plan_name")
  invitations                 invitations[]
  organizationUsers           organizationsUsers[]
  projects                    projects[]
  creator                     users                 @relation(fields: [creatorId], references: [id])
  plan                        plans?                @relation(fields: [planName], references: [name])
}

model organizationsUsers {
  createdAt       DateTime?     @default(now()) @map(name: "created_at")
  organizationId  Int           @map(name: "organization_id")
  role            String        @default("member")
  userId          Int           @map(name: "user_id")
  organization    organizations @relation(fields: [organizationId], references: [id])
  user            users         @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId], name: "organizations_users_organization_id_user_id")
  @@map(name: "organizations_users")
}

model projects {
  createdAt       DateTime?     @default(now()) @map(name: "created_at")
  creatorId       Int           @map(name: "creator_id")
  id              Int           @default(autoincrement()) @id
  name            String
  organizationId  Int           @map(name: "organization_id")
  creator         users         @relation(fields: [creatorId], references: [id])
  organization    organizations @relation(fields: [organizationId], references: [id])
  apis            apis[]
}

model users {
  avatar               String?
  company              String?
  createdAt            DateTime?             @default(now()) @map(name: "created_at")
  displayName          String                @map(name: "display_name")
  email                String                @unique
  featureFlags         Json?                 @map(name: "feature_flags")
  id                   Int                   @default(autoincrement()) @id
  username             String                @unique
  planName             String?               @default("free") @map(name: "plan_name")
  apis                 apis[]
  invitations          invitations[]
  organizationsForUser organizationsUsers[]
  projects             projects[]
  organizations        organizations[]
  plan                 plans?                @relation(fields: [planName], references: [name])
}

model plans {
  name         String @unique
  restrictions Json?
}
